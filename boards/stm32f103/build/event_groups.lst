ARM GAS  /tmp/cc8p18bC.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTestWaitCondition,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTestWaitCondition:
  23              	.LFB15:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/cc8p18bC.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  /tmp/cc8p18bC.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc8p18bC.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc8p18bC.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
ARM GAS  /tmp/cc8p18bC.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
ARM GAS  /tmp/cc8p18bC.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
ARM GAS  /tmp/cc8p18bC.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc8p18bC.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/cc8p18bC.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
ARM GAS  /tmp/cc8p18bC.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  /tmp/cc8p18bC.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  25              		.loc 1 657 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc8p18bC.s 			page 13


  29              		@ link register save eliminated.
  30              	.LVL0:
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  31              		.loc 1 660 0
  32 0000 1AB9     		cbnz	r2, .L2
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  33              		.loc 1 664 0
  34 0002 0842     		tst	r0, r1
  35 0004 06D1     		bne	.L4
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  36              		.loc 1 658 0
  37 0006 0020     		movs	r0, #0
  38              	.LVL1:
  39 0008 7047     		bx	lr
  40              	.LVL2:
  41              	.L2:
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  42              		.loc 1 677 0
  43 000a 31EA0003 		bics	r3, r1, r0
  44 000e 03D0     		beq	.L5
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  45              		.loc 1 658 0
  46 0010 0020     		movs	r0, #0
  47              	.LVL3:
  48 0012 7047     		bx	lr
  49              	.LVL4:
  50              	.L4:
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  51              		.loc 1 666 0
  52 0014 0120     		movs	r0, #1
  53              	.LVL5:
  54 0016 7047     		bx	lr
  55              	.LVL6:
  56              	.L5:
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  57              		.loc 1 679 0
  58 0018 0120     		movs	r0, #1
  59              	.LVL7:
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/cc8p18bC.s 			page 14


 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  60              		.loc 1 688 0
  61 001a 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE15:
  65              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  66              		.align	1
  67              		.global	xEventGroupCreateStatic
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	xEventGroupCreateStatic:
  74              	.LFB5:
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  75              		.loc 1 94 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL8:
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  80              		.loc 1 98 0
  81 0000 80B1     		cbz	r0, .L13
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  82              		.loc 1 94 0
  83 0002 10B5     		push	{r4, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 4, -8
  87              		.cfi_offset 14, -4
  88 0004 82B0     		sub	sp, sp, #8
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 16
  91 0006 0446     		mov	r4, r0
  92              	.LBB36:
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  93              		.loc 1 105 0
  94 0008 1C23     		movs	r3, #28
  95 000a 0193     		str	r3, [sp, #4]
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  96              		.loc 1 106 0
  97 000c 019B     		ldr	r3, [sp, #4]
  98 000e 1C2B     		cmp	r3, #28
  99 0010 11D0     		beq	.L9
 100              	.LBB37:
 101              	.LBB38:
 102              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
ARM GAS  /tmp/cc8p18bC.s 			page 15


   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
ARM GAS  /tmp/cc8p18bC.s 			page 16


  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
ARM GAS  /tmp/cc8p18bC.s 			page 17


 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
ARM GAS  /tmp/cc8p18bC.s 			page 18


 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 103              		.loc 2 195 0
 104              		.syntax unified
 105              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 106 0012 4FF05003 			mov r3, #80												
 107 0016 83F31188 		msr basepri, r3											
 108 001a BFF36F8F 		isb														
 109 001e BFF34F8F 		dsb														
 110              	
 111              	@ 0 "" 2
 112              	.LVL9:
 113              		.thumb
 114              		.syntax unified
 115              	.L10:
 116 0022 FEE7     		b	.L10
 117              	.L13:
 118              	.LCFI2:
 119              		.cfi_def_cfa_offset 0
 120              		.cfi_restore 4
 121              		.cfi_restore 14
 122              	.LBE38:
 123              	.LBE37:
 124              	.LBE36:
 125              	.LBB39:
 126              	.LBB40:
 127              		.syntax unified
 128              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 129 0024 4FF05003 			mov r3, #80												
 130 0028 83F31188 		msr basepri, r3											
 131 002c BFF36F8F 		isb														
 132 0030 BFF34F8F 		dsb														
 133              	
 134              	@ 0 "" 2
 135              	.LVL10:
 136              		.thumb
 137              		.syntax unified
 138              	.L8:
ARM GAS  /tmp/cc8p18bC.s 			page 19


 139 0034 FEE7     		b	.L8
 140              	.L9:
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 16
 143              		.cfi_offset 4, -8
 144              		.cfi_offset 14, -4
 145              	.LVL11:
 146              	.LBE40:
 147              	.LBE39:
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 148              		.loc 1 115 0
 149 0036 0023     		movs	r3, #0
 150 0038 40F8043B 		str	r3, [r0], #4
 151              	.LVL12:
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 152              		.loc 1 116 0
 153 003c FFF7FEFF 		bl	vListInitialise
 154              	.LVL13:
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 155              		.loc 1 123 0
 156 0040 0123     		movs	r3, #1
 157 0042 2376     		strb	r3, [r4, #24]
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 158              		.loc 1 135 0
 159 0044 2046     		mov	r0, r4
 160 0046 02B0     		add	sp, sp, #8
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 8
 163              		@ sp needed
 164 0048 10BD     		pop	{r4, pc}
 165              		.cfi_endproc
 166              	.LFE5:
 168              		.section	.text.xEventGroupCreate,"ax",%progbits
 169              		.align	1
 170              		.global	xEventGroupCreate
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu softvfp
 176              	xEventGroupCreate:
 177              	.LFB6:
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 178              		.loc 1 143 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182 0000 38B5     		push	{r3, r4, r5, lr}
 183              	.LCFI5:
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 3, -16
 186              		.cfi_offset 4, -12
 187              		.cfi_offset 5, -8
 188              		.cfi_offset 14, -4
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 189              		.loc 1 147 0
 190 0002 1C20     		movs	r0, #28
 191 0004 FFF7FEFF 		bl	pvPortMalloc
ARM GAS  /tmp/cc8p18bC.s 			page 20


 192              	.LVL14:
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 193              		.loc 1 149 0
 194 0008 0446     		mov	r4, r0
 195 000a 28B1     		cbz	r0, .L15
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 196              		.loc 1 151 0
 197 000c 0025     		movs	r5, #0
 198 000e 40F8045B 		str	r5, [r0], #4
 199              	.LVL15:
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 200              		.loc 1 152 0
 201 0012 FFF7FEFF 		bl	vListInitialise
 202              	.LVL16:
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 203              		.loc 1 159 0
 204 0016 2576     		strb	r5, [r4, #24]
 205              	.L15:
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206              		.loc 1 171 0
 207 0018 2046     		mov	r0, r4
 208 001a 38BD     		pop	{r3, r4, r5, pc}
 209              		.cfi_endproc
 210              	.LFE6:
 212              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 213              		.align	1
 214              		.global	xEventGroupWaitBits
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	xEventGroupWaitBits:
 221              	.LFB8:
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 222              		.loc 1 297 0
 223              		.cfi_startproc
 224              		@ args = 4, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL17:
 227 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 228              	.LCFI6:
 229              		.cfi_def_cfa_offset 32
 230              		.cfi_offset 4, -32
 231              		.cfi_offset 5, -28
 232              		.cfi_offset 6, -24
 233              		.cfi_offset 7, -20
 234              		.cfi_offset 8, -16
 235              		.cfi_offset 9, -12
 236              		.cfi_offset 10, -8
 237              		.cfi_offset 14, -4
 238 0004 DDF82090 		ldr	r9, [sp, #32]
 239              	.LVL18:
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 240              		.loc 1 305 0
 241 0008 60B1     		cbz	r0, .L41
 242 000a 0646     		mov	r6, r0
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
ARM GAS  /tmp/cc8p18bC.s 			page 21


 243              		.loc 1 306 0
 244 000c 11F07F4A 		ands	r10, r1, #-16777216
 245 0010 11D0     		beq	.L20
 246              	.LBB41:
 247              	.LBB42:
 248              		.loc 2 195 0
 249              		.syntax unified
 250              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 251 0012 4FF05003 			mov r3, #80												
 252 0016 83F31188 		msr basepri, r3											
 253 001a BFF36F8F 		isb														
 254 001e BFF34F8F 		dsb														
 255              	
 256              	@ 0 "" 2
 257              	.LVL19:
 258              		.thumb
 259              		.syntax unified
 260              	.L21:
 261 0022 FEE7     		b	.L21
 262              	.LVL20:
 263              	.L41:
 264              	.LBE42:
 265              	.LBE41:
 266              	.LBB43:
 267              	.LBB44:
 268              		.syntax unified
 269              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 270 0024 4FF05003 			mov r3, #80												
 271 0028 83F31188 		msr basepri, r3											
 272 002c BFF36F8F 		isb														
 273 0030 BFF34F8F 		dsb														
 274              	
 275              	@ 0 "" 2
 276              	.LVL21:
 277              		.thumb
 278              		.syntax unified
 279              	.L19:
 280 0034 FEE7     		b	.L19
 281              	.LVL22:
 282              	.L20:
 283              	.LBE44:
 284              	.LBE43:
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 285              		.loc 1 307 0
 286 0036 41B9     		cbnz	r1, .L22
 287              	.LBB45:
 288              	.LBB46:
 289              		.loc 2 195 0
 290              		.syntax unified
 291              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 292 0038 4FF05003 			mov r3, #80												
 293 003c 83F31188 		msr basepri, r3											
 294 0040 BFF36F8F 		isb														
 295 0044 BFF34F8F 		dsb														
 296              	
 297              	@ 0 "" 2
 298              	.LVL23:
ARM GAS  /tmp/cc8p18bC.s 			page 22


 299              		.thumb
 300              		.syntax unified
 301              	.L23:
 302 0048 FEE7     		b	.L23
 303              	.LVL24:
 304              	.L22:
 305 004a 9846     		mov	r8, r3
 306 004c 1746     		mov	r7, r2
 307 004e 0D46     		mov	r5, r1
 308              	.LBE46:
 309              	.LBE45:
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 310              		.loc 1 310 0
 311 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 312              	.LVL25:
 313 0054 68B9     		cbnz	r0, .L35
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 314              		.loc 1 310 0 is_stmt 0 discriminator 2
 315 0056 B9F1000F 		cmp	r9, #0
 316 005a 0CD1     		bne	.L36
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 317              		.loc 1 310 0
 318 005c 0123     		movs	r3, #1
 319              	.L24:
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 320              		.loc 1 310 0 discriminator 6
 321 005e 63B9     		cbnz	r3, .L25
 322              	.LBB47:
 323              	.LBB48:
 324              		.loc 2 195 0 is_stmt 1
 325              		.syntax unified
 326              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 327 0060 4FF05003 			mov r3, #80												
 328 0064 83F31188 		msr basepri, r3											
 329 0068 BFF36F8F 		isb														
 330 006c BFF34F8F 		dsb														
 331              	
 332              	@ 0 "" 2
 333              	.LVL26:
 334              		.thumb
 335              		.syntax unified
 336              	.L26:
 337 0070 FEE7     		b	.L26
 338              	.L35:
 339              	.LBE48:
 340              	.LBE47:
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 341              		.loc 1 310 0
 342 0072 0123     		movs	r3, #1
 343 0074 F3E7     		b	.L24
 344              	.L36:
 345 0076 0023     		movs	r3, #0
 346 0078 F1E7     		b	.L24
 347              	.L25:
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 348              		.loc 1 314 0
 349 007a FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/cc8p18bC.s 			page 23


 350              	.LVL27:
 351              	.LBB49:
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 352              		.loc 1 316 0
 353 007e 3468     		ldr	r4, [r6]
 354              	.LVL28:
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 355              		.loc 1 319 0
 356 0080 4246     		mov	r2, r8
 357 0082 2946     		mov	r1, r5
 358 0084 2046     		mov	r0, r4
 359 0086 FFF7FEFF 		bl	prvTestWaitCondition
 360              	.LVL29:
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 361              		.loc 1 321 0
 362 008a 58B3     		cbz	r0, .L27
 363              	.LVL30:
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 364              		.loc 1 329 0
 365 008c 17B1     		cbz	r7, .L28
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 366              		.loc 1 331 0
 367 008e 24EA0503 		bic	r3, r4, r5
 368 0092 3360     		str	r3, [r6]
 369              	.LVL31:
 370              	.L28:
 371              	.LBE49:
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 372              		.loc 1 382 0
 373 0094 FFF7FEFF 		bl	xTaskResumeAll
 374              	.LVL32:
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 375              		.loc 1 384 0
 376 0098 BAF1000F 		cmp	r10, #0
 377 009c 1FD0     		beq	.L17
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 378              		.loc 1 386 0
 379 009e 38B9     		cbnz	r0, .L32
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 380              		.loc 1 388 0
 381 00a0 4FF08052 		mov	r2, #268435456
 382 00a4 1B4B     		ldr	r3, .L42
 383 00a6 1A60     		str	r2, [r3]
 384              		.syntax unified
 385              	@ 388 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 386 00a8 BFF34F8F 		dsb
 387              	@ 0 "" 2
 388              	@ 388 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 389 00ac BFF36F8F 		isb
 390              	@ 0 "" 2
 391              		.thumb
 392              		.syntax unified
 393              	.L32:
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 394              		.loc 1 399 0
 395 00b0 FFF7FEFF 		bl	uxTaskResetEventItemValue
 396              	.LVL33:
ARM GAS  /tmp/cc8p18bC.s 			page 24


 397 00b4 0446     		mov	r4, r0
 398              	.LVL34:
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 399              		.loc 1 401 0
 400 00b6 10F0007F 		tst	r0, #33554432
 401 00ba 0ED1     		bne	.L33
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 402              		.loc 1 403 0
 403 00bc FFF7FEFF 		bl	vPortEnterCritical
 404              	.LVL35:
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 405              		.loc 1 406 0
 406 00c0 3468     		ldr	r4, [r6]
 407              	.LVL36:
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 408              		.loc 1 410 0
 409 00c2 4246     		mov	r2, r8
 410 00c4 2946     		mov	r1, r5
 411 00c6 2046     		mov	r0, r4
 412 00c8 FFF7FEFF 		bl	prvTestWaitCondition
 413              	.LVL37:
 414 00cc 18B1     		cbz	r0, .L34
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 415              		.loc 1 412 0
 416 00ce 17B1     		cbz	r7, .L34
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 417              		.loc 1 414 0
 418 00d0 24EA0505 		bic	r5, r4, r5
 419              	.LVL38:
 420 00d4 3560     		str	r5, [r6]
 421              	.L34:
 422              	.LVL39:
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 423              		.loc 1 427 0
 424 00d6 FFF7FEFF 		bl	vPortExitCritical
 425              	.LVL40:
 426              	.L33:
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 427              		.loc 1 435 0
 428 00da 24F07F44 		bic	r4, r4, #-16777216
 429              	.LVL41:
 430              	.L17:
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 431              		.loc 1 443 0
 432 00de 2046     		mov	r0, r4
 433 00e0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 434              	.LVL42:
 435              	.L27:
 436              	.LBB50:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 437              		.loc 1 338 0
 438 00e4 B9F1000F 		cmp	r9, #0
 439 00e8 11D0     		beq	.L38
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 440              		.loc 1 351 0
 441 00ea 6FB9     		cbnz	r7, .L39
 442              	.LBE50:
ARM GAS  /tmp/cc8p18bC.s 			page 25


 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 443              		.loc 1 299 0
 444 00ec 0021     		movs	r1, #0
 445              	.L29:
 446              	.LVL43:
 447              	.LBB51:
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 448              		.loc 1 360 0
 449 00ee B8F1000F 		cmp	r8, #0
 450 00f2 01D0     		beq	.L30
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 451              		.loc 1 362 0
 452 00f4 41F08061 		orr	r1, r1, #67108864
 453              	.LVL44:
 454              	.L30:
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 455              		.loc 1 372 0
 456 00f8 4A46     		mov	r2, r9
 457 00fa 2943     		orrs	r1, r1, r5
 458              	.LVL45:
 459 00fc 301D     		adds	r0, r6, #4
 460              	.LVL46:
 461 00fe FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 462              	.LVL47:
 463 0102 CA46     		mov	r10, r9
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464              		.loc 1 377 0
 465 0104 0024     		movs	r4, #0
 466              	.LVL48:
 467 0106 C5E7     		b	.L28
 468              	.LVL49:
 469              	.L39:
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 470              		.loc 1 353 0
 471 0108 4FF08071 		mov	r1, #16777216
 472 010c EFE7     		b	.L29
 473              	.L38:
 474 010e CA46     		mov	r10, r9
 475 0110 C0E7     		b	.L28
 476              	.L43:
 477 0112 00BF     		.align	2
 478              	.L42:
 479 0114 04ED00E0 		.word	-536810236
 480              	.LBE51:
 481              		.cfi_endproc
 482              	.LFE8:
 484              		.section	.text.xEventGroupClearBits,"ax",%progbits
 485              		.align	1
 486              		.global	xEventGroupClearBits
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu softvfp
 492              	xEventGroupClearBits:
 493              	.LFB9:
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 494              		.loc 1 447 0
ARM GAS  /tmp/cc8p18bC.s 			page 26


 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              	.LVL50:
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 499              		.loc 1 453 0
 500 0000 68B1     		cbz	r0, .L51
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 501              		.loc 1 447 0
 502 0002 70B5     		push	{r4, r5, r6, lr}
 503              	.LCFI7:
 504              		.cfi_def_cfa_offset 16
 505              		.cfi_offset 4, -16
 506              		.cfi_offset 5, -12
 507              		.cfi_offset 6, -8
 508              		.cfi_offset 14, -4
 509 0004 0546     		mov	r5, r0
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 510              		.loc 1 454 0
 511 0006 11F07F4F 		tst	r1, #-16777216
 512 000a 11D0     		beq	.L47
 513              	.LBB52:
 514              	.LBB53:
 515              		.loc 2 195 0
 516              		.syntax unified
 517              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 518 000c 4FF05003 			mov r3, #80												
 519 0010 83F31188 		msr basepri, r3											
 520 0014 BFF36F8F 		isb														
 521 0018 BFF34F8F 		dsb														
 522              	
 523              	@ 0 "" 2
 524              	.LVL51:
 525              		.thumb
 526              		.syntax unified
 527              	.L48:
 528 001c FEE7     		b	.L48
 529              	.L51:
 530              	.LCFI8:
 531              		.cfi_def_cfa_offset 0
 532              		.cfi_restore 4
 533              		.cfi_restore 5
 534              		.cfi_restore 6
 535              		.cfi_restore 14
 536              	.LBE53:
 537              	.LBE52:
 538              	.LBB54:
 539              	.LBB55:
 540              		.syntax unified
 541              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 542 001e 4FF05003 			mov r3, #80												
 543 0022 83F31188 		msr basepri, r3											
 544 0026 BFF36F8F 		isb														
 545 002a BFF34F8F 		dsb														
 546              	
 547              	@ 0 "" 2
 548              	.LVL52:
ARM GAS  /tmp/cc8p18bC.s 			page 27


 549              		.thumb
 550              		.syntax unified
 551              	.L46:
 552 002e FEE7     		b	.L46
 553              	.L47:
 554              	.LCFI9:
 555              		.cfi_def_cfa_offset 16
 556              		.cfi_offset 4, -16
 557              		.cfi_offset 5, -12
 558              		.cfi_offset 6, -8
 559              		.cfi_offset 14, -4
 560 0030 0C46     		mov	r4, r1
 561              	.LBE55:
 562              	.LBE54:
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 563              		.loc 1 456 0
 564 0032 FFF7FEFF 		bl	vPortEnterCritical
 565              	.LVL53:
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 566              		.loc 1 462 0
 567 0036 2E68     		ldr	r6, [r5]
 568              	.LVL54:
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 569              		.loc 1 465 0
 570 0038 26EA0404 		bic	r4, r6, r4
 571              	.LVL55:
 572 003c 2C60     		str	r4, [r5]
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 573              		.loc 1 467 0
 574 003e FFF7FEFF 		bl	vPortExitCritical
 575              	.LVL56:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 576              		.loc 1 470 0
 577 0042 3046     		mov	r0, r6
 578 0044 70BD     		pop	{r4, r5, r6, pc}
 579              		.cfi_endproc
 580              	.LFE9:
 582              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 583              		.align	1
 584              		.global	xEventGroupGetBitsFromISR
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu softvfp
 590              	xEventGroupGetBitsFromISR:
 591              	.LFB10:
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 592              		.loc 1 489 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597              	.LVL57:
 598              	.LBB56:
 599              	.LBB57:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
ARM GAS  /tmp/cc8p18bC.s 			page 28


 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 600              		.loc 2 211 0
 601              		.syntax unified
 602              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 603 0000 EFF31183 			mrs r3, basepri											
 604 0004 4FF05002 		mov r2, #80												
 605 0008 82F31188 		msr basepri, r2											
 606 000c BFF36F8F 		isb														
 607 0010 BFF34F8F 		dsb														
 608              	
 609              	@ 0 "" 2
 610              		.thumb
 611              		.syntax unified
 612              	.LBE57:
 613              	.LBE56:
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 614              		.loc 1 496 0
 615 0014 0068     		ldr	r0, [r0]
 616              	.LVL58:
 617              	.LBB58:
 618              	.LBB59:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 619              		.loc 2 229 0
 620              		.syntax unified
 621              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 622 0016 83F31188 			msr basepri, r3	
 623              	@ 0 "" 2
ARM GAS  /tmp/cc8p18bC.s 			page 29


 624              		.thumb
 625              		.syntax unified
 626              	.LBE59:
 627              	.LBE58:
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 628              		.loc 1 501 0
 629 001a 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE10:
 633              		.section	.text.xEventGroupSetBits,"ax",%progbits
 634              		.align	1
 635              		.global	xEventGroupSetBits
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu softvfp
 641              	xEventGroupSetBits:
 642              	.LFB11:
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 643              		.loc 1 505 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              	.LVL59:
 648 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 649              	.LCFI10:
 650              		.cfi_def_cfa_offset 24
 651              		.cfi_offset 3, -24
 652              		.cfi_offset 4, -20
 653              		.cfi_offset 5, -16
 654              		.cfi_offset 6, -12
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657              	.LVL60:
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 658              		.loc 1 515 0
 659 0002 60B1     		cbz	r0, .L67
 660 0004 0446     		mov	r4, r0
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 661              		.loc 1 516 0
 662 0006 11F07F4F 		tst	r1, #-16777216
 663 000a 11D0     		beq	.L56
 664              	.LBB60:
 665              	.LBB61:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 666              		.loc 2 195 0
 667              		.syntax unified
 668              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 669 000c 4FF05003 			mov r3, #80												
 670 0010 83F31188 		msr basepri, r3											
 671 0014 BFF36F8F 		isb														
 672 0018 BFF34F8F 		dsb														
 673              	
 674              	@ 0 "" 2
 675              	.LVL61:
 676              		.thumb
 677              		.syntax unified
ARM GAS  /tmp/cc8p18bC.s 			page 30


 678              	.L57:
 679 001c FEE7     		b	.L57
 680              	.L67:
 681              	.LBE61:
 682              	.LBE60:
 683              	.LBB62:
 684              	.LBB63:
 685              		.syntax unified
 686              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 687 001e 4FF05003 			mov r3, #80												
 688 0022 83F31188 		msr basepri, r3											
 689 0026 BFF36F8F 		isb														
 690 002a BFF34F8F 		dsb														
 691              	
 692              	@ 0 "" 2
 693              	.LVL62:
 694              		.thumb
 695              		.syntax unified
 696              	.L55:
 697 002e FEE7     		b	.L55
 698              	.L56:
 699 0030 0D46     		mov	r5, r1
 700              	.LVL63:
 701              	.LBE63:
 702              	.LBE62:
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 703              		.loc 1 519 0
 704 0032 00F10C06 		add	r6, r0, #12
 705              	.LVL64:
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 706              		.loc 1 520 0
 707 0036 FFF7FEFF 		bl	vTaskSuspendAll
 708              	.LVL65:
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 709              		.loc 1 524 0
 710 003a 2069     		ldr	r0, [r4, #16]
 711              	.LVL66:
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 712              		.loc 1 527 0
 713 003c 2368     		ldr	r3, [r4]
 714 003e 2B43     		orrs	r3, r3, r5
 715 0040 2360     		str	r3, [r4]
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 716              		.loc 1 509 0
 717 0042 0025     		movs	r5, #0
 718              	.LVL67:
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 719              		.loc 1 530 0
 720 0044 0FE0     		b	.L58
 721              	.LVL68:
 722              	.L59:
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 723              		.loc 1 552 0
 724 0046 2368     		ldr	r3, [r4]
 725 0048 32EA0303 		bics	r3, r2, r3
 726 004c 03D0     		beq	.L65
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc8p18bC.s 			page 31


 727              		.loc 1 534 0
 728 004e 0023     		movs	r3, #0
 729 0050 16E0     		b	.L60
 730              	.L64:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 731              		.loc 1 545 0
 732 0052 0123     		movs	r3, #1
 733 0054 14E0     		b	.L60
 734              	.L65:
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 735              		.loc 1 555 0
 736 0056 0123     		movs	r3, #1
 737 0058 12E0     		b	.L60
 738              	.LVL69:
 739              	.L62:
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 740              		.loc 1 579 0
 741 005a 2168     		ldr	r1, [r4]
 742              	.LVL70:
 743 005c 41F00071 		orr	r1, r1, #33554432
 744 0060 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 745              	.LVL71:
 746              	.L61:
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 747              		.loc 1 534 0
 748 0064 3846     		mov	r0, r7
 749              	.LVL72:
 750              	.L58:
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 751              		.loc 1 530 0
 752 0066 B042     		cmp	r0, r6
 753 0068 11D0     		beq	.L68
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 754              		.loc 1 532 0
 755 006a 4768     		ldr	r7, [r0, #4]
 756              	.LVL73:
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 757              		.loc 1 533 0
 758 006c 0168     		ldr	r1, [r0]
 759              	.LVL74:
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 760              		.loc 1 538 0
 761 006e 21F07F42 		bic	r2, r1, #-16777216
 762              	.LVL75:
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 763              		.loc 1 540 0
 764 0072 11F0806F 		tst	r1, #67108864
 765 0076 E6D1     		bne	.L59
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 766              		.loc 1 543 0
 767 0078 2368     		ldr	r3, [r4]
 768 007a 1A42     		tst	r2, r3
 769 007c E9D1     		bne	.L64
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 770              		.loc 1 534 0
 771 007e 0023     		movs	r3, #0
 772              	.L60:
ARM GAS  /tmp/cc8p18bC.s 			page 32


 773              	.LVL76:
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 774              		.loc 1 562 0
 775 0080 002B     		cmp	r3, #0
 776 0082 EFD0     		beq	.L61
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 777              		.loc 1 565 0
 778 0084 11F0807F 		tst	r1, #16777216
 779 0088 E7D0     		beq	.L62
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 780              		.loc 1 567 0
 781 008a 1543     		orrs	r5, r5, r2
 782              	.LVL77:
 783 008c E5E7     		b	.L62
 784              	.LVL78:
 785              	.L68:
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 786              		.loc 1 590 0
 787 008e 2368     		ldr	r3, [r4]
 788 0090 23EA0503 		bic	r3, r3, r5
 789 0094 2360     		str	r3, [r4]
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 790              		.loc 1 592 0
 791 0096 FFF7FEFF 		bl	xTaskResumeAll
 792              	.LVL79:
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 793              		.loc 1 595 0
 794 009a 2068     		ldr	r0, [r4]
 795 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 796              		.cfi_endproc
 797              	.LFE11:
 799              		.section	.text.xEventGroupSync,"ax",%progbits
 800              		.align	1
 801              		.global	xEventGroupSync
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu softvfp
 807              	xEventGroupSync:
 808              	.LFB7:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 809              		.loc 1 177 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL80:
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 814              		.loc 1 183 0
 815 0000 12F07F4F 		tst	r2, #-16777216
 816 0004 08D0     		beq	.L70
 817              	.LBB64:
 818              	.LBB65:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 819              		.loc 2 195 0
 820              		.syntax unified
 821              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 822 0006 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc8p18bC.s 			page 33


 823 000a 83F31188 		msr basepri, r3											
 824 000e BFF36F8F 		isb														
 825 0012 BFF34F8F 		dsb														
 826              	
 827              	@ 0 "" 2
 828              	.LVL81:
 829              		.thumb
 830              		.syntax unified
 831              	.L71:
 832 0016 FEE7     		b	.L71
 833              	.LVL82:
 834              	.L70:
 835              	.LBE65:
 836              	.LBE64:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 837              		.loc 1 177 0
 838 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 839              	.LCFI11:
 840              		.cfi_def_cfa_offset 24
 841              		.cfi_offset 4, -24
 842              		.cfi_offset 5, -20
 843              		.cfi_offset 6, -16
 844              		.cfi_offset 7, -12
 845              		.cfi_offset 8, -8
 846              		.cfi_offset 14, -4
 847 001c 0646     		mov	r6, r0
 848 001e 8846     		mov	r8, r1
 849 0020 1546     		mov	r5, r2
 850 0022 1F46     		mov	r7, r3
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 851              		.loc 1 184 0
 852 0024 42B9     		cbnz	r2, .L72
 853              	.LBB66:
 854              	.LBB67:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 855              		.loc 2 195 0
 856              		.syntax unified
 857              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 858 0026 4FF05003 			mov r3, #80												
 859 002a 83F31188 		msr basepri, r3											
 860 002e BFF36F8F 		isb														
 861 0032 BFF34F8F 		dsb														
 862              	
 863              	@ 0 "" 2
 864              	.LVL83:
 865              		.thumb
 866              		.syntax unified
 867              	.L73:
 868 0036 FEE7     		b	.L73
 869              	.LVL84:
 870              	.L72:
 871              	.LBE67:
 872              	.LBE66:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 873              		.loc 1 187 0
 874 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 875              	.LVL85:
ARM GAS  /tmp/cc8p18bC.s 			page 34


 876 003c 58B9     		cbnz	r0, .L84
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 877              		.loc 1 187 0 is_stmt 0 discriminator 2
 878 003e 67B9     		cbnz	r7, .L85
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 879              		.loc 1 187 0
 880 0040 0123     		movs	r3, #1
 881              	.L74:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 882              		.loc 1 187 0 discriminator 6
 883 0042 63B9     		cbnz	r3, .L75
 884              	.LBB68:
 885              	.LBB69:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 886              		.loc 2 195 0 is_stmt 1
 887              		.syntax unified
 888              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 889 0044 4FF05003 			mov r3, #80												
 890 0048 83F31188 		msr basepri, r3											
 891 004c BFF36F8F 		isb														
 892 0050 BFF34F8F 		dsb														
 893              	
 894              	@ 0 "" 2
 895              	.LVL86:
 896              		.thumb
 897              		.syntax unified
 898              	.L76:
 899 0054 FEE7     		b	.L76
 900              	.L84:
 901              	.LBE69:
 902              	.LBE68:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 903              		.loc 1 187 0
 904 0056 0123     		movs	r3, #1
 905 0058 F3E7     		b	.L74
 906              	.L85:
 907 005a 0023     		movs	r3, #0
 908 005c F1E7     		b	.L74
 909              	.L75:
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 910              		.loc 1 191 0
 911 005e FFF7FEFF 		bl	vTaskSuspendAll
 912              	.LVL87:
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 913              		.loc 1 193 0
 914 0062 3468     		ldr	r4, [r6]
 915              	.LVL88:
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 916              		.loc 1 195 0
 917 0064 4146     		mov	r1, r8
 918 0066 3046     		mov	r0, r6
 919 0068 FFF7FEFF 		bl	xEventGroupSetBits
 920              	.LVL89:
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 921              		.loc 1 197 0
 922 006c 44EA0804 		orr	r4, r4, r8
 923              	.LVL90:
ARM GAS  /tmp/cc8p18bC.s 			page 35


 924 0070 35EA0403 		bics	r3, r5, r4
 925 0074 26D1     		bne	.L77
 926              	.LVL91:
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 927              		.loc 1 204 0
 928 0076 3368     		ldr	r3, [r6]
 929 0078 23EA0503 		bic	r3, r3, r5
 930 007c 3360     		str	r3, [r6]
 931              	.LVL92:
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 932              		.loc 1 206 0
 933 007e 0027     		movs	r7, #0
 934              	.LVL93:
 935              	.L78:
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 936              		.loc 1 234 0
 937 0080 FFF7FEFF 		bl	xTaskResumeAll
 938              	.LVL94:
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 939              		.loc 1 236 0
 940 0084 DFB1     		cbz	r7, .L69
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 941              		.loc 1 238 0
 942 0086 38B9     		cbnz	r0, .L81
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 943              		.loc 1 240 0
 944 0088 4FF08052 		mov	r2, #268435456
 945 008c 134B     		ldr	r3, .L88
 946 008e 1A60     		str	r2, [r3]
 947              		.syntax unified
 948              	@ 240 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 949 0090 BFF34F8F 		dsb
 950              	@ 0 "" 2
 951              	@ 240 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 952 0094 BFF36F8F 		isb
 953              	@ 0 "" 2
 954              		.thumb
 955              		.syntax unified
 956              	.L81:
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 957              		.loc 1 251 0
 958 0098 FFF7FEFF 		bl	uxTaskResetEventItemValue
 959              	.LVL95:
 960 009c 0446     		mov	r4, r0
 961              	.LVL96:
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 962              		.loc 1 253 0
 963 009e 10F0007F 		tst	r0, #33554432
 964 00a2 0AD1     		bne	.L82
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 965              		.loc 1 256 0
 966 00a4 FFF7FEFF 		bl	vPortEnterCritical
 967              	.LVL97:
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 968              		.loc 1 258 0
 969 00a8 3468     		ldr	r4, [r6]
 970              	.LVL98:
ARM GAS  /tmp/cc8p18bC.s 			page 36


 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 971              		.loc 1 264 0
 972 00aa 35EA0403 		bics	r3, r5, r4
 973 00ae 02D1     		bne	.L83
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 974              		.loc 1 266 0
 975 00b0 24EA0505 		bic	r5, r4, r5
 976              	.LVL99:
 977 00b4 3560     		str	r5, [r6]
 978              	.L83:
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 979              		.loc 1 273 0
 980 00b6 FFF7FEFF 		bl	vPortExitCritical
 981              	.LVL100:
 982              	.L82:
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 983              		.loc 1 284 0
 984 00ba 24F07F44 		bic	r4, r4, #-16777216
 985              	.LVL101:
 986              	.L69:
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 987              		.loc 1 293 0
 988 00be 2046     		mov	r0, r4
 989 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 990              	.LVL102:
 991              	.L77:
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 992              		.loc 1 210 0
 993 00c4 3FB1     		cbz	r7, .L79
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 994              		.loc 1 217 0
 995 00c6 3A46     		mov	r2, r7
 996 00c8 45F0A061 		orr	r1, r5, #83886080
 997 00cc 301D     		adds	r0, r6, #4
 998 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 999              	.LVL103:
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1000              		.loc 1 223 0
 1001 00d2 0024     		movs	r4, #0
 1002 00d4 D4E7     		b	.L78
 1003              	.LVL104:
 1004              	.L79:
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1005              		.loc 1 229 0
 1006 00d6 3468     		ldr	r4, [r6]
 1007              	.LVL105:
 1008 00d8 D2E7     		b	.L78
 1009              	.L89:
 1010 00da 00BF     		.align	2
 1011              	.L88:
 1012 00dc 04ED00E0 		.word	-536810236
 1013              		.cfi_endproc
 1014              	.LFE7:
 1016              		.section	.text.vEventGroupDelete,"ax",%progbits
 1017              		.align	1
 1018              		.global	vEventGroupDelete
 1019              		.syntax unified
ARM GAS  /tmp/cc8p18bC.s 			page 37


 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu softvfp
 1024              	vEventGroupDelete:
 1025              	.LFB12:
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1026              		.loc 1 599 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              	.LVL106:
 1031 0000 10B5     		push	{r4, lr}
 1032              	.LCFI12:
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 4, -8
 1035              		.cfi_offset 14, -4
 1036 0002 0446     		mov	r4, r0
 1037              	.LVL107:
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1038              		.loc 1 603 0
 1039 0004 FFF7FEFF 		bl	vTaskSuspendAll
 1040              	.LVL108:
 1041              	.L91:
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1042              		.loc 1 607 0
 1043 0008 6368     		ldr	r3, [r4, #4]
 1044 000a 93B1     		cbz	r3, .L97
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1045              		.loc 1 611 0
 1046 000c 2069     		ldr	r0, [r4, #16]
 1047 000e 04F10C03 		add	r3, r4, #12
 1048 0012 9842     		cmp	r0, r3
 1049 0014 04D0     		beq	.L98
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1050              		.loc 1 612 0
 1051 0016 4FF00071 		mov	r1, #33554432
 1052 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1053              	.LVL109:
 1054 001e F3E7     		b	.L91
 1055              	.L98:
 1056              	.LBB70:
 1057              	.LBB71:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1058              		.loc 2 195 0
 1059              		.syntax unified
 1060              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1061 0020 4FF05003 			mov r3, #80												
 1062 0024 83F31188 		msr basepri, r3											
 1063 0028 BFF36F8F 		isb														
 1064 002c BFF34F8F 		dsb														
 1065              	
 1066              	@ 0 "" 2
 1067              	.LVL110:
 1068              		.thumb
 1069              		.syntax unified
 1070              	.L93:
 1071 0030 FEE7     		b	.L93
ARM GAS  /tmp/cc8p18bC.s 			page 38


 1072              	.L97:
 1073              	.LBE71:
 1074              	.LBE70:
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1075              		.loc 1 625 0
 1076 0032 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 1077 0034 13B1     		cbz	r3, .L99
 1078              	.L95:
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1079              		.loc 1 636 0
 1080 0036 FFF7FEFF 		bl	xTaskResumeAll
 1081              	.LVL111:
 1082 003a 10BD     		pop	{r4, pc}
 1083              	.LVL112:
 1084              	.L99:
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1085              		.loc 1 627 0
 1086 003c 2046     		mov	r0, r4
 1087 003e FFF7FEFF 		bl	vPortFree
 1088              	.LVL113:
 1089 0042 F8E7     		b	.L95
 1090              		.cfi_endproc
 1091              	.LFE12:
 1093              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1094              		.align	1
 1095              		.global	vEventGroupSetBitsCallback
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu softvfp
 1101              	vEventGroupSetBitsCallback:
 1102              	.LFB13:
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1103              		.loc 1 643 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              	.LVL114:
 1108 0000 08B5     		push	{r3, lr}
 1109              	.LCFI13:
 1110              		.cfi_def_cfa_offset 8
 1111              		.cfi_offset 3, -8
 1112              		.cfi_offset 14, -4
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1113              		.loc 1 644 0
 1114 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1115              	.LVL115:
 1116 0006 08BD     		pop	{r3, pc}
 1117              		.cfi_endproc
 1118              	.LFE13:
 1120              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1121              		.align	1
 1122              		.global	vEventGroupClearBitsCallback
 1123              		.syntax unified
 1124              		.thumb
 1125              		.thumb_func
 1126              		.fpu softvfp
ARM GAS  /tmp/cc8p18bC.s 			page 39


 1128              	vEventGroupClearBitsCallback:
 1129              	.LFB14:
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 1130              		.loc 1 651 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              	.LVL116:
 1135 0000 08B5     		push	{r3, lr}
 1136              	.LCFI14:
 1137              		.cfi_def_cfa_offset 8
 1138              		.cfi_offset 3, -8
 1139              		.cfi_offset 14, -4
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1140              		.loc 1 652 0
 1141 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1142              	.LVL117:
 1143 0006 08BD     		pop	{r3, pc}
 1144              		.cfi_endproc
 1145              	.LFE14:
 1147              		.text
 1148              	.Letext0:
 1149              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1150              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1151              		.file 5 "/usr/include/newlib/sys/lock.h"
 1152              		.file 6 "/usr/include/newlib/sys/_types.h"
 1153              		.file 7 "/usr/include/newlib/sys/reent.h"
 1154              		.file 8 "/usr/include/newlib/stdlib.h"
 1155              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 1156              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 1157              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1158              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1159              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1160              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1161              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/cc8p18bC.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/cc8p18bC.s:16     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/cc8p18bC.s:22     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/cc8p18bC.s:66     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/cc8p18bC.s:73     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/cc8p18bC.s:169    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/cc8p18bC.s:176    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/cc8p18bC.s:213    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/cc8p18bC.s:220    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/cc8p18bC.s:479    .text.xEventGroupWaitBits:0000000000000114 $d
     /tmp/cc8p18bC.s:485    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/cc8p18bC.s:492    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/cc8p18bC.s:583    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/cc8p18bC.s:590    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/cc8p18bC.s:634    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/cc8p18bC.s:641    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/cc8p18bC.s:800    .text.xEventGroupSync:0000000000000000 $t
     /tmp/cc8p18bC.s:807    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/cc8p18bC.s:1012   .text.xEventGroupSync:00000000000000dc $d
     /tmp/cc8p18bC.s:1017   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/cc8p18bC.s:1024   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/cc8p18bC.s:1094   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/cc8p18bC.s:1101   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/cc8p18bC.s:1121   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/cc8p18bC.s:1128   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
vTaskRemoveFromUnorderedEventList
vPortFree
